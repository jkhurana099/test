screen loader==>
https://stackoverflow.com/questions/37069609/show-loading-screen-when-navigating-between-routes-in-angular-2?noredirect=1&lq=1

Before I start discussion about sessions and the most frequent situations which occur in a process of development I want to underline some things. What is the HTTP session? What for it exist? I hope you know that HTTP is a stateless protocol, that’s mean that there is no permanent connection between a browser and server. And as the result server doesn’t know who is an initiator of a request, even if an application has just one user. The session is a tool for identifying of requests author. The previous sentence is rough enough, but it explains the main purpose of the sessions. Every user gets it own session with unique identifier when he visits site first time.


httpSession integration https://www.tuturself.com/posts/view?menuId=3&postId=1071

PROPERTY AND EVENT BINDING
People often describe property binding as one-way data binding because it flows a value in one direction, from a component's data property into a target element property.
You cannot use property binding to pull values out of the target element.
https://coursetro.com/posts/code/23/Angular-2-Property-&-Event-Binding-Tutorial


Angular 2 HTTP get handling 404 error-->
You need to pass a second callback to the subscribe method. This callback will execute when there is an error.

function handleError(error) {
  console.log(error)
}

fetchData(){
  return this.http.get('https://jsonplaceholder.typicode.com/psts/6')
      .map(
          (res) => res.json()
      )
      .subscribe(
        (data) => console.log(data),
        (error) => handleError(error)
  );
}

-->WE can't have two root components with the same selector in your page, you also can't have two @Component() decorators on the same class.

If your components have different selectors, just run bootstrap for each root component

@Component({
    selector: 'app',
    template: '<h1>AppComponent1</h1>'
})
export class AppComponent1 { }

@Component({
    selector: 'appTwo',
    template: '<h1>AppComponent2</h1>'
})
export class AppComponent2 { }


bootstrap(AppComponent1)
bootstrap(AppComponent2)

INJECTABLE---->(NEED TO EXPLORE)
https://stackoverflow.com/questions/43678423/why-are-components-not-marked-with-injectable-annotation-but-services-need-to

TEMPLATE REFERENCE VARIABLE(PENDING)
@INPUT & @OUTPUT


How to make sure that single instance will be used in an entire application?
How would you optimize the angular 2 application for better performance?

Well, optimization depends on the type and size of application and many other factors==>
Consider AOT compilation.
Make sure the application is bundled, uglified, and tree shaking is done.
Make sure the application doesn’t have un-necessary import statements.
Make sure that any 3rd party library, which is not used, is removed from the application.
Have all dependencies and dev-dependencies are clearly separated.
I would consider lazy loading instead of fully bundled app if the app size is more.


