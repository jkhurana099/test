Absolute positioning means that the element is taken completely out of the normal flow of the page layout. As far as the rest of the elements on the page are concerned, the absolutely positioned element simply doesn't exist. The element itself is then drawn separately, sort of "on top" of everything else, at the position you specify using the left, right, top and bottom attributes.

Using the position you specify with these attributes, the element is then placed at that position within its last ancestor element which has a position attribute of anything other than static (page elements default to static when no position attribute specified), or the document body (browser viewport) if no such ancestor exists.

For example, if I had this code:

<body>
  <div style="position:absolute; left: 20px; top: 20px;"></div>
</body>
...the <div> would be positioned 20px from the top of the browser viewport, and 20px from the left edge of same.

However, if I did something like this:

 <div id="outer" style="position:relative">
   <div id="inner" style="position:absolute; left: 20px; top: 20px;"></div>
 </div>
...then the inner div would be positioned 20px from the top of the outer div, and 20px from the left edge of same, because the outer div isn't positioned with position:static because we've explicitly set it to use position:relative.

Relative positioning, on the other hand, is just like stating no positioning at all, but the left, right, top and bottom attributes "nudge" the element out of their normal layout. The rest of the elements on the page still get laid out as if the element was in its normal spot though.

For example, if I had this code:

<span>Span1</span>
<span>Span2</span>
<span>Span3</span>
...then all three <span> elements would sit next to each other without overlapping.

If I set the second <span> to use relative positioning, like this:

<span>Span1</span>
<span style="position: relative; left: -5px;">Span2</span>
<span>Span3</span>
...then Span2 would overlap the right side of Span1 by 5px. Span1 and Span3 would sit in exactly the same place as they did in the first example, leaving a 5px gap between the right side of Span2 and the left side of Span3.

-----

Browsers can't execute TypeScript directly. Typescript must be "transpiled" into JavaScript using the tsc compiler, which requires some configuration.
tsconfig.json->a configuration file which tells compiler to  transpiles the typescript files into javascript ffiles

http://www.webdevelopmenthelp.net/2016/12/angularjs2-interview-questions.html#Q15
-------------

Data Binding
The main feature of any JavaScript framework is data binding. As Angular 1, Angular 2 also support data binding.

There are 4 ways of binding a data according to the direction to the DOM, from the DOM, or in both directions:

<input [(ngModel)]="food.name">
<li>{{food.name}}</li>
<food-detail [food]="selectedFood"></food-detail>
<li (click)="selectFood(food)"></li>


The {{hero.name}} interpolation display food.name value in li tag.
The [hero] property binding passes the selected food value from parent to child component.
The (click) event binding calls the selectedFood function when a user clicks on it.
Two-way data binding is an important fourth way that combines property and event binding by the ngModel directive. 

-----------
Dependency Injections
Dependency injection allows one to inject a dependency as a service throughout the web application. To inject a dependency we do not create a service but we have a constructor to request the service. The framework then provides it. For example:

constructor(private service: HeroService) { }

screen loader==>
https://stackoverflow.com/questions/37069609/show-loading-screen-when-navigating-between-routes-in-angular-2?noredirect=1&lq=1

Before I start discussion about sessions and the most frequent situations which occur in a process of development I want to underline some things. What is the HTTP session? What for it exist? I hope you know that HTTP is a stateless protocol, that’s mean that there is no permanent connection between a browser and server. And as the result server doesn’t know who is an initiator of a request, even if an application has just one user. The session is a tool for identifying of requests author. The previous sentence is rough enough, but it explains the main purpose of the sessions. Every user gets it own session with unique identifier when he visits site first time.


httpSession integration https://www.tuturself.com/posts/view?menuId=3&postId=1071

PROPERTY AND EVENT BINDING
People often describe property binding as one-way data binding because it flows a value in one direction, from a component's data property into a target element property.
You cannot use property binding to pull values out of the target element.
https://coursetro.com/posts/code/23/Angular-2-Property-&-Event-Binding-Tutorial


Angular 2 HTTP get handling 404 error-->
You need to pass a second callback to the subscribe method. This callback will execute when there is an error.

function handleError(error) {
  console.log(error)
}

fetchData(){
  return this.http.get('https://jsonplaceholder.typicode.com/psts/6')
      .map(
          (res) => res.json()
      )
      .subscribe(
        (data) => console.log(data),
        (error) => handleError(error)
  );
}

-->WE can't have two root components with the same selector in your page, you also can't have two @Component() decorators on the same class.

If your components have different selectors, just run bootstrap for each root component

@Component({
    selector: 'app',
    template: '<h1>AppComponent1</h1>'
})
export class AppComponent1 { }

@Component({
    selector: 'appTwo',
    template: '<h1>AppComponent2</h1>'
})
export class AppComponent2 { }


bootstrap(AppComponent1)
bootstrap(AppComponent2)

INJECTABLE---->(NEED TO EXPLORE)
https://stackoverflow.com/questions/43678423/why-are-components-not-marked-with-injectable-annotation-but-services-need-to

TEMPLATE REFERENCE VARIABLE(PENDING)
@INPUT & @OUTPUT


How to make sure that single instance will be used in an entire application?
How would you optimize the angular 2 application for better performance?

Well, optimization depends on the type and size of application and many other factors==>
Consider AOT compilation.
Make sure the application is bundled, uglified, and tree shaking is done.
Make sure the application doesn’t have un-necessary import statements.
Make sure that any 3rd party library, which is not used, is removed from the application.
Have all dependencies and dev-dependencies are clearly separated.
I would consider lazy loading instead of fully bundled app if the app size is more.

http://expressjs-book.com/index.html%3Fp=128.html
